version: "3.4"

services:
  php:
    build:
      context: ./api
    ports:
      - "80:80"
      - "443:443"
      - "3000:3000"
    depends_on:
      - database
    restart: unless-stopped
    volumes:
      - ./api/:/var/www/html/
      - ./api/docker/php/000-default.conf:/etc/apache2/sites-available/000-default.conf
      - ./api/docker/php/ports.conf:/etc/apache2/ports.conf
      - ./api/docker/php/aws_credentials:/home/www-data/.aws/credentials
      - ./api/docker/php/aws_credentials:/root/.aws/credentials
      
    environment:
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
      TRUSTED_HOSTS: ^${SERVER_NAME:-example\.com|localhost}|caddy$$
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      MERCURE_JWT_SECRET: ${MERCURE_JWT_SECRET}


  database:
    image: postgres:${POSTGRES_VERSION:-13}-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-api}
      # You should definitely change the password in production
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-!ChangeMe!}
      - POSTGRES_USER=${POSTGRES_USER:-api-platform}
    volumes:
      - db_data:/var/lib/postgresql/data:rw
    ports:
      - "5431:5432"
    
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@pgadmin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-root}
    ports:
      - "5052:80"
    depends_on:
      - database


  aws:
    image: localstack/localstack
    ports:
      - "444:443"
      - "4510-4559:4510-4559"
      - "4566:4566"
    environment:
      - SERVICES=${AWS_SERVICES:-s3,sqs}
      - AWS_S3_BUCKET=$AWS_S3_BUCKET
      - DEBUG=1
      - START_WEB=1
      - HOST_TMP_FOLDER=${TMPDIR:-/tmp/}localstack
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOSTNAME_EXTERNAL=aws
    volumes:
      - ./shared/docker/aws:/docker-entrypoint-initaws.d
      - localstack-data:/tmp/localstack
      - "/var/run/docker.sock:/var/run/docker.sock"

  # https://medium.com/@TimvanBaarsen/how-to-run-an-elasticsearch-7-x-single-node-cluster-for-local-development-using-docker-compose-2b7ab73d8b82:
  elasticsearch:
    image: elasticsearch:7.17.6
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - discovery.zen.minimum_master_nodes=1
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=100mb
      - cluster.routing.allocation.disk.watermark.high=50mb
      - cluster.routing.allocation.disk.watermark.flood_stage=10mb
      - cluster.info.update.interval=1m
    ports:
      - "9200:9200"
      - "9300:9300"

###> symfony/mercure-bundle ###
  mercure:
    image: dunglas/mercure
    restart: unless-stopped
    environment:
      SERVER_NAME: ":80"
      MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_JWT_SECRET}
      MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_JWT_SECRET}
    
###< symfony/mercure-bundle ###

volumes:
  elasticsearch-data:
  localstack-data:
###> doctrine/doctrine-bundle ###
  db_data:
###< doctrine/doctrine-bundle ###

